<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.rootservices.authorization.persistence.mapper.ResourceOwnerTokenMapper">

    <resultMap id="resourceOwnerToken" type="org.rootservices.authorization.persistence.entity.ResourceOwnerToken">
        <id column="id" property="id" javaType="java.util.UUID" jdbcType="OTHER" typeHandler="org.rootservices.authorization.persistence.mapper.typehandler.UUIDTypeHandler"/>
        <result column="created_at" property="createdAt" javaType="java.time.OffsetDateTime" jdbcType="DATE" typeHandler="org.rootservices.authorization.persistence.mapper.typehandler.OffsetDateTimeTypeHandler"/>
        <result column="updated_at" property="updatedAt" javaType="java.time.OffsetDateTime" jdbcType="DATE" typeHandler="org.rootservices.authorization.persistence.mapper.typehandler.OffsetDateTimeTypeHandler"/>
        <association property="token"
                     resultMap="org.rootservices.authorization.persistence.mapper.TokenMapper.token"
                     columnPrefix="token_"/>
        <association property="resourceOwner"
                     resultMap="org.rootservices.authorization.persistence.mapper.ResourceOwnerMapper.resourceOwner"
                     columnPrefix="ro_"/>
    </resultMap>

    <insert id="insert" >
        insert into resource_owner_token (id, resource_owner_id, token_id)
        values
        (
            #{resourceOwnerToken.id},
            #{resourceOwnerToken.resourceOwner.uuid},
            #{resourceOwnerToken.token.uuid}
        )
    </insert>

    <select id="getByAccessToken" resultMap="resourceOwnerToken">
        select
        resource_owner_token.id,
        resource_owner_token.created_at,
        resource_owner_token.updated_at,

        token.uuid as token_uuid,
        token.revoked as token_revoked,
        token.grant_type as token_grant_type,
        token.expires_at as token_expires_at,
        token.created_at as token_created_at,

        token_scope.id as token_ts_id,
        token_scope.token_id as token_ts_token_id,
        token_scope.created_at as token_ts_created_at,
        token_scope.updated_at as token_ts_updated_at,

        scope.uuid as token_ts_scope_uuid,
        scope.name as token_ts_scope_name,
        scope.created_at as token_ts_scope_created_at,

        resource_owner.uuid as ro_uuid,
        resource_owner.email as ro_email,
        resource_owner.email_verified as ro_email_verified,
        resource_owner.created_at as ro_created_at

        from resource_owner_token
        join resource_owner on resource_owner.uuid = resource_owner_token.resource_owner_id
        join token on token.uuid = resource_owner_token.token_id
        join token_scope on token_scope.token_id = token.uuid
        join scope on scope.uuid = token_scope.scope_id
        where token.token = #{accessToken}
    </select>
</mapper>