property.logLevel = INFO
property.location = /var/log/application/
property.filename = ${location}application.log

# RollingFileAppender will print logs in file which can be rotated based on time or size
appender.rolling.type = RollingFile
appender.rolling.name = fileLogger
appender.rolling.fileName= ${filename}
appender.rolling.filePattern= application_%d{yyyyMMdd}.log.gz
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = %d{ISO8601_OFFSET_DATE_TIME_HHMM} %5p %t %c{2}:%L - %m%n
appender.rolling.policies.type = Policies

# Rotate log file each day
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
appender.rolling.policies.time.interval = 1
appender.rolling.policies.time.modulate = true
appender.rolling.strategy.type = DefaultRolloverStrategy

rootLogger.level=INFO
rootLogger.appenderRef.rolling.ref = fileLogger

loggers=spring, mapper, otter, controller, rtcg

logger.spring.name=org.springframework
logger.spring.level=INFO

logger.mapper.name=net.tokensmith.authorization.persistence.mapper
logger.mapper.level=ERROR

logger.otter.name=net.tokensmith.otter
logger.otter.level=DEBUG

logger.controller.name=net.tokensmith.authorization.http.controller
logger.controller.level=DEBUG

logger.rtcg.name=net.tokensmith.authorization.oauth2.grant.redirect.code.token.RequestTokenCodeGrant
logger.rtcg.level=DEBUG